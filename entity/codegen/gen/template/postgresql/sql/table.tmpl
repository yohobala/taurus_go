{{- define "sql/table" }}
/*
    Server Type: PostgreSQL
    Catalogs: {{ $.Database.Name }}
    Schema: public
*/

{{ range $key, $entity := $.Database.Entities }}
{{ $schema := `"public"` }}
{{- $schemaV := `'public'` }}
{{- $table := joinStrings   `"` $entity.AttrName  `"`}}
{{- $tableV := joinStrings   `'` $entity.AttrName  `'`}}
{{- range $i,$seq := $entity.Sequences -}}
-- ********
-- Sequence {{ $seq.Name }}
-- ********
DO $$
BEGIN
    CREATE  SEQUENCE IF NOT EXISTS {{ $schema }}."{{ $seq.Name }}" 
    INCREMENT {{ $seq.Increament }}
    MINVALUE  {{ $seq.Min }}
    MAXVALUE {{ $seq.Max }}
    START {{ $seq.Start }}
    CACHE {{ $seq.Cache }};
END
$$;
{{ end -}}

-- ********
-- Table {{ $table }}
-- ********
DO $$
DECLARE
    column_rec RECORD;
    v_constraint_name TEXT;
BEGIN
    IF EXISTS (SELECT FROM pg_tables WHERE schemaname = {{ $schemaV }} AND tablename = {{ $tableV }}) THEN
        -- Check for any extra columns, and delete them if there are any.
        -- 检查是否有多余的列，如果有则删除。
        FOR column_rec IN SELECT tbl.column_name, tbl.data_type FROM information_schema.columns tbl WHERE table_schema = {{ $schemaV }} AND table_name = {{ $tableV }} LOOP
            IF column_rec.column_name NOT IN ({{ joinFieldAttrNames $entity.Fields }}) THEN
                EXECUTE 'ALTER TABLE {{ $schema }}.{{ $table }} DROP COLUMN IF EXISTS ' || quote_ident(column_rec.column_name) || ' CASCADE;';
            END IF;
        END LOOP;
        -- Check for missing columns, and add them if any are missing.
        -- 检查是否缺少列，如果缺少则添加
        {{- range $i,$field := $entity.Fields }}
        {{- $fieldName := $field.AttrName }}
        IF NOT EXISTS (SELECT FROM information_schema.columns WHERE table_schema = {{ $schemaV }} AND table_name = {{ $tableV }} AND column_name = '{{ $fieldName }}' ) THEN
            ALTER TABLE {{ $schema }}.{{ $table }} ADD COLUMN {{ template "init_table_field" $field}};
        ELSE
            {{ template "update_table_field" dict "Schema" $schema "Table" $table "Field" $field }}
        END IF;
        {{- end }}
        -- Search for the name of any existing primary key constraints. 
        -- If found, delete them first, then add new primary key constraints.
        -- 查找现有的主键约束名称，如果找到了先删除它， 添加新的主键约束。
        SELECT conname INTO v_constraint_name
        FROM pg_constraint con
        JOIN pg_class rel ON rel.oid = con.conrelid
        JOIN pg_namespace nsp ON nsp.oid = rel.relnamespace
        WHERE nsp.nspname = {{ $schemaV }}
            AND rel.relname = {{ $tableV }}
            AND con.contype = 'p';
        IF v_constraint_name IS NOT NULL THEN
            EXECUTE 'ALTER TABLE {{ $schema }}.{{ $table }} DROP CONSTRAINT IF EXISTS ' || quote_ident(v_constraint_name);
        END IF;
    ELSE
        -- If the table does not exist, then create the table.
        -- 如果表不存在，则创建表。
        CREATE TABLE {{ $schema }}.{{ $table }} (
            {{- range $i,$field := $entity.Fields }}
            {{ template "init_table_field" $field }}
            {{- if ne $i (sub (len $entity.Fields) 1) -}}
                ,
            {{- end }}
            {{- end }}
        );
    END IF;
    -- Field Comment.
    -- 字段备注。
    {{- range $i,$field := $entity.Fields }}
    {{ if $field.Comment }}COMMENT ON COLUMN {{ $schema }}.{{ $table }}.{{ printf "%q" $field.AttrName }} IS  '{{  $field.Comment }}';{{ end }}
    {{- end -}}

    {{ if $entity.Comment }}
    -- Table Comment.
    -- 表备注。
    COMMENT ON TABLE {{ $schema }}.{{ $table }} IS '{{ $entity.Comment }}';
    {{- end }}

    -- Primary Key.
     -- 主键。
    ALTER TABLE {{ $schema }}.{{ $table }} ADD CONSTRAINT {{ $entity.AttrName }}_pkey PRIMARY KEY ({{ joinFieldPrimaies  $entity.Fields }});
END
$$;
{{ end }}

-- ********
-- Delete Foreign Key
-- ********
DO $$
BEGIN
{{ range $key, $entity := $.Database.Entities }}
{{- $schema := `"public"` }}
{{- $schemaV := `'public'` }}
{{- $table := joinStrings   `"` $entity.AttrName  `"`}}
{{- $tableV := joinStrings   `'` $entity.AttrName  `'`}}
{{- range $i,$rel := $entity.Relations }}
IF EXISTS (
    SELECT 1
    FROM information_schema.table_constraints
    WHERE table_schema = 'public'
    AND table_name = '{{ $rel.Dependent.AttrName }}'
    AND constraint_name = '{{ $rel.Desc.Constraint }}'
) THEN
    ALTER TABLE "public"."{{ $rel.Dependent.AttrName }}" DROP CONSTRAINT "{{ $rel.Desc.Constraint }}";
END IF;
{{ end }}
{{- end }}
END
$$;


-- ********
-- Add Foreign Key
-- ********
DO $$
BEGIN
{{ range $key, $entity := $.Database.Entities }}
{{- $schema := `"public"` }}
{{- $schemaV := `'public'` }}
{{- $table := joinStrings   `"` $entity.AttrName  `"`}}
{{- $tableV := joinStrings   `'` $entity.AttrName  `'`}}
{{- range $i,$rel := $entity.Relations }}
{{- if eq $rel.Dependent.AttrName $entity.AttrName }}
ALTER TABLE {{ $schema }}."{{ $rel.Dependent.AttrName }}"
ADD CONSTRAINT {{ $rel.Desc.Constraint }} FOREIGN KEY ("{{ $rel.Dependent.Field.AttrName }}")
REFERENCES {{ $schema }}."{{ $rel.Principal.AttrName }}" ("{{ $rel.Principal.Field.AttrName }}");
{{ end }}
{{- end }}
{{- end }}
END
$$;

{{ end }}

{{- define "init_table_field" }}
{{- $fieldName := printf "%q" $.AttrName }}
        {{- $fieldName }} {{ $.AttrType }}
        {{- if $.Required }} NOT NULL {{- end }}
        {{- if $.Default }} DEFAULT {{ $.DefaultValue }} {{- end }}
{{- end }}


{{- define "update_table_field" }}
{{- $fieldName := printf "%q" $.Field.AttrName }}
{{- $header := printf "ALTER TABLE %s.%s ALTER COLUMN %s" $.Schema $.Table $fieldName }}
        {{ if $.Field.Required }}    {{ $header }} SET NOT NULL; {{ else }}    {{ $header }} DROP NOT NULL; {{ end }}
        {{ if $.Field.Default }}    {{ $header }} SET DEFAULT {{ $.Field.DefaultValue }}; {{ else }}    {{ $header }} DROP DEFAULT; {{ end }}
        {{- $header }} TYPE {{ $.Field.AttrType }} USING {{ $fieldName }}::{{ $.Field.AttrType }};

{{- end }}