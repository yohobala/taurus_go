{{ define "entity/create" }}
{{ $entity := $.Entity.Name}}
{{ $entityAttr := $.Entity.AttrName }}
{{ $header := dict "Package" $entityAttr }}
{{ template "header" $header }}

{{ $importPkgs := dict "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package }}
{{ template "import/load" $importPkgs }}

// {{ $entity }}Create is the create action for the {{ $entity }}.
type {{ $entity }}Create struct {
	*internal.Config
	tracker entity.Tracker
	e *{{ $entity }}
}

// New{{ $entity }}Create creates a new {{ $entity }}Create.
func New{{ $entity }}Create(c *internal.Config, e *{{ $entity }},t entity.Tracker) *{{ $entity }}Create {
	return &{{ $entity }}Create{
		Config: c,
		e:      e,
		tracker: t,
	}
}


func (o *{{ $entity }}Create) create(ctx context.Context) (*{{ $entity }}, error) {
	return o.sqlCreate(ctx)
}

func (o *{{ $entity }}Create) sqlCreate(ctx context.Context) (*{{ $entity }}, error) {
	var (
		spec, err = o.createSpec()
		res         = o.e
	)
	if err != nil {
		return nil, err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.FieldName) error {
		return scan(res, fields, rows)
	}
	if err := entitysql.NewCreate(ctx, o.Driver, spec); err != nil {
		return nil, err
	}
	setUnchanged(o.tracker, res)
	return res, nil
}

func (o *{{ $entity }}Create) createSpec() (*entitysql.CreateSpec, error) {
	returning := []entitysql.FieldName{
		{{- range $i, $field := $.Entity.Fields }}
		{{- if  $field.Default  }}
		Field{{ $field.Name }}.Name,
		{{- end }}
		{{- end }}
	}
	spec := entitysql.NewCreateSpec(Entity, returning)
	spec.Fields = make([]*entitysql.FieldSpec, 0, len(rows))
	for i := range rows {
		switch rows[i] {
        {{- range $i, $field := $.Entity.Fields }}
        {{- if and $field.Required  ( not $field.Default ) }}
        case Field{{ $field.Name }}.Name:
            if err := spec.CheckRequired(Field{{ $field.Name }}.Name, o.e.{{ $field.Name }}); err != nil {
                return nil, err
            }
            spec.Fields = append(spec.Fields, &entitysql.FieldSpec{
                Column: Field{{ $field.Name }}.Name.String(),
                Value:  o.e.{{ $field.Name }}.Value(),
            })
        {{- end }}
        {{- end }}
		}
	}
	spec.Returning = returning
	return spec, nil
}


{{ end }}