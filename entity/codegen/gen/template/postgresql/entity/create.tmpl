{{ define "entity/create" }}
{{ $entity := $.Entity.Name}}
{{ $entityAttr := $.Entity.AttrName }}
{{ $header := dict "Package" $entityAttr }}
{{ template "header" $header }}

{{ $importPkgs := dict "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package }}
{{ template "import/load" $importPkgs }}

// {{ $entity }}Create is the create action for the {{ $entity }}.
type {{ $entity }}Create struct {
	config *internal.Config
	es []*{{ $entity }}
}

// New{{ $entity }}Create creates a new {{ $entity }}Create.
func New{{ $entity }}Create(c *internal.Config, es ...*{{ $entity }}) *{{ $entity }}Create {
	return &{{ $entity }}Create{
		config: c,
		es:      es,
	}
}

// create executes the create action.
func (o *{{ $entity }}Create) create(ctx context.Context, tx dialect.Tx) (error) {
	return o.sqlCreate(ctx, tx)
}

// sqlCreate executes the SQL create action.
func (o *{{ $entity }}Create) sqlCreate(ctx context.Context, tx dialect.Tx) (error) {
	var (
		spec, err = o.createSpec()
		res         = o.es
		cursor    = 0
	)
	if err != nil {
		return err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.FieldName) error {
		e := res[cursor]
		cursor++
		if err := scan(e, fields, rows); err != nil {
			return err
		} else {
			res = append(res, e)
			return e.setUnchanged()
		}
	}
	return entitysql.NewCreate(ctx, tx, spec)
}

// createSpec creates the create action spec. It checks for required fields and sets the returning fields.
func (o *{{ $entity }}Create) createSpec() (*entitysql.CreateSpec, error) {
	returning := []entitysql.FieldName{
		{{- range $i, $field := $.Entity.Fields }}
		{{- if  $field.Default  }}
		Field{{ $field.Name }}.Name,
		{{- end }}
		{{- end }}
	}
	spec := entitysql.NewCreateSpec(Entity, columns)
	spec.Fields = make([][]*entitysql.FieldSpec, 0, len(o.es))
	for _, e := range o.es {
		fields := make([]*entitysql.FieldSpec, 0, len(columns))
		for j := range columns {
			switch columns[j] {
				{{- range $i, $field := $.Entity.Fields }}
				{{- if $field.Required }} 
				{{- if not $field.Default }}
				case Field{{ $field.Name }}.Name:
					if err := spec.CheckRequired(Field{{ $field.Name }}.Name, e.{{ $field.Name }}); err != nil {
						return nil, err
					}
					fields = append(fields, &entitysql.FieldSpec{
						Column: Field{{ $field.Name }}.Name.String(),
						Value:  e.{{ $field.Name }}.Value(),
					})
				{{- end }}
				{{- else }}
				case Field{{ $field.Name }}.Name:
					fields = append(fields, &entitysql.FieldSpec{
						Column: Field{{ $field.Name }}.Name.String(),
						Value:  e.{{ $field.Name }}.Value(),
					})
				{{- end }}
				{{- end }}
			} 
		}
		spec.Fields = append(spec.Fields, fields)
	}
	spec.Returning = returning
	return spec, nil
}


{{ end }}