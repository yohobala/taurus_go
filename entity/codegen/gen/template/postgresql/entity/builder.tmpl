{{ define "entity/builder" }}
{{ $entity :=  .Entity.Name }}
{{ $entityAttr := .Entity.AttrName }}
{{ $header := createMap "Package" .PackageName }}
{{ template "header" $header }}
{{ $BuilderName := stringJoin ( stringToLower  $entity ) "Builder" }}


{{ $importPkgs := createMap "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package  "Entity" $.Entity }}
{{ template "import/load" $importPkgs }}
{{- range $i,$field := $.Entity.Fields }}
import "{{ $field.StoragerPkg }}"
{{- end }}

// {{ $BuilderName }} is a builder for the {{ $entity }} entity.
//
// The builder is used to create, update, and delete {{ $entity }} entities.
type {{ $BuilderName }} struct {
	config *{{ stringToLower $entity}}Config
	tracker   entity.Tracker

	{{- range $field :=  .Entity.Fields }}
	{{- if $field.Comment }}
	{{ $field.Name }} {{ $.Entity.AttrName }}.Pred{{ $field.Name }} // {{ $field.Name }} {{ $field.Comment }}
	{{- else }}
	{{ $field.Name }} {{ $.Entity.AttrName }}.Pred{{ $field.Name }}
	{{- end }}
	
	{{- end }}

	{{- range $field :=  .Entity.Fields }}
	// By{{ $field.Name }} configures the query to sort results based on the '{{ $field.AttrName }}' field of the entity.
	// Sorting entities in ascending order by default.
	By{{ $field.Name }} {{ $.Entity.AttrName }}.By{{ $field.Name }}
	{{- end }}
	
	{{- range $relation :=  .Entity.Relations }}
	{{ $result := getEntityRel $relation $.Entity  }}
	{{ with $result }} 
	// {{ stringToFirstCap $result.Name}} configures the query to include data from the '{{$result.AttrName}}' table.
	// The method modifies the existing query to include a LEFT JOIN clause.
	// {{ stringToFirstCap $result.Name }} be used as an argument to the Include method。
	{{ stringToFirstCap $result.Name}} *{{ $result.RelType }}
	{{ end }}
	{{- end }}
}

// new{{  $entity }}Builder creates a new {{  $entity }}Builder .
func new{{  $entity }}Builder (c *{{ stringToLower $entity}}Config, t entity.Tracker {{- range $relation :=  .Entity.Relations }} {{- $result := getEntityRel $relation $.Entity  }}{{- with $result }} ,{{ $result.Name }} {{ $result.RelType }}{{- end }}{{- end }}) *{{ $BuilderName }} {
	return &{{  $BuilderName }} {
		config:  c,
		tracker: t,
		{{ range $relation :=  .Entity.Relations }}
		{{- $result := getEntityRel $relation $.Entity  }}
		{{- with $result }} 
		{{- stringToFirstCap $result.Name }}: &{{ $result.Name }},
		{{- end }}
		{{- end }}
	}
}

// Create creates a new UserEntity，and add it to the tracker.
// Required parameters are fields that have no default value but are required, 
// and options are fields that can be left empty by calling WithFieldName.
func (b *{{ $BuilderName }}) Create({{ joinRequiredFields .Entity.Fields false }} options ...func(*{{$entity }})) (*{{$entity}} , error) {
	e := b.config.New()
	switch t := e.(type) {
	case *{{ $entity }}:
		return t.create({{ joinRequiredFields .Entity.Fields true }} options...)
	default:
		return nil, entity.Err_0100030006
	}
}

func (b *{{ $BuilderName }}) Remove(e *{{ $entity }}) error {
	if e.config.Mutation == nil {
		return nil
	}
	return e.remove()
}

// First returns the first {{ $entity }}.
func (s *{{ $BuilderName }}) First(ctx context.Context) (*{{ $entity }}, error) {
	query := s.initQuery()
	return query.First(ctx)
}

func (s *{{ $BuilderName }}) ToList(ctx context.Context) ([]*{{ $entity }}, error) {
	query := s.initQuery()
	return query.ToList(ctx)
}

func (s *{{ $BuilderName }}) Include(rels ...{{ stringToLower $entity }}Rel) *{{ stringToFirstCap $entity }}Query {
	query := s.initQuery()
	return query.Include(rels...)
}

func (s *{{ $BuilderName }}) Order(o ...{{ $.Entity.AttrName }}.OrderTerm) *{{ stringToFirstCap $entity }}Query {
	query := s.initQuery()
	return query.Order(o...)
}

func (s *{{ $BuilderName }}) Where(conditions ...entitysql.PredicateFunc) *{{ stringToFirstCap $entity }}Query {
	query := s.initQuery()
	return query.Where(conditions...)
}

{{- range $field :=  .Entity.Fields }}
{{ $info := createMap "Field" $field "EntityName" $entity "Entity" $entity "BuilderName" $BuilderName }}
{{ template "with_field" $info }}
{{- end }}

// Exec executes all the {{ stringToLower $entity }}Mutations for the {{ $entity }}.
func (s *{{ $BuilderName }}) Exec(ctx context.Context, tx dialect.Tx) error {
	if len(s.config.{{ stringToLower $entity }}Mutations.Addeds) > 0 {
		e := s.config.{{ stringToLower $entity }}Mutations.Get(entity.Added)
		n := new{{ stringToFirstCap $entity }}Create(s.config.Dialect, e...)
		if err := n.create(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.{{ stringToLower $entity }}Mutations.Modifieds) > 0 {
		e := s.config.{{ stringToLower $entity }}Mutations.Get(entity.Modified)
		n := new{{ stringToFirstCap $entity }}Update(s.config.Dialect, e...)
		if err := n.update(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.{{ stringToLower $entity }}Mutations.Deleteds) > 0 {
		e := s.config.{{ stringToLower $entity }}Mutations.Get(entity.Deleted)
		n := new{{ stringToFirstCap $entity }}Delete(s.config.Dialect, e...)
		if err := n.delete(ctx, tx); err != nil {
			return err
		}
	}
	return nil
}

func (s *{{ $BuilderName }}) initQuery() *{{ stringToFirstCap $entity }}Query {
	return new{{ $entity }}Query(s.config.Dialect, s.tracker, s.config.{{ stringToLower $entity }}Mutations)
}

// {{ stringToLower $entity }}Mutations is a collection of {{ $entity }} mutation.
type {{ stringToLower $entity  }}Mutations struct {
	Detacheds  map[string]*{{ $entity }}
	Unchangeds map[string]*{{ $entity }}
	Deleteds   map[string]*{{ $entity }}
	Modifieds  map[string]*{{ $entity }}
	Addeds     map[string]*{{ $entity }}
}

// new{{ .Entity.Name }}Mutations creates a new mutations.
func new{{ stringToFirstCap $entity }}Mutations() *{{ stringToLower $entity }}Mutations {
	return &{{ stringToLower $entity }}Mutations{
		Detacheds:  make(map[string]*{{ $entity }}),
		Unchangeds: make(map[string]*{{ $entity }}),
		Deleteds:   make(map[string]*{{ $entity }}),
		Modifieds:  make(map[string]*{{ $entity }}),
		Addeds:     make(map[string]*{{ $entity }}),
	}
}

// Get returns all the {{ $entity }} in the specified state.
func (ms *{{ stringToLower $entity  }}Mutations) Get(state entity.EntityState) []*{{ $entity }} {
	switch state {
	case entity.Detached:
		s := make([]*{{ $entity }}, 0, len(ms.Detacheds))
		for _, m := range ms.Detacheds {
			s = append(s, m)
		}
		return s
	case entity.Unchanged:
		s := make([]*{{ $entity }}, 0, len(ms.Unchangeds))
		for _, m := range ms.Unchangeds {
			s = append(s, m)
		}
		return s
	case entity.Deleted:
		s := make([]*{{ $entity }}, 0, len(ms.Deleteds))
		for _, m := range ms.Deleteds {
			s = append(s, m)
		}
		return s
	case entity.Modified:
		s := make([]*{{ $entity }}, 0, len(ms.Modifieds))
		for _, m := range ms.Modifieds {
			s = append(s, m)
		}
		return s
	case entity.Added:
		s := make([]*{{ $entity }}, 0, len(ms.Addeds))
		for _, m := range ms.Addeds {
			s = append(s, m)
		}
		return s
	}
	return nil
}

// SetEntityState sets the state of the entity.
func (ms *{{ stringToLower $entity  }}Mutations) SetEntityState(e *{{ $entity }}, state entity.EntityState) error {
	m := e.config.Mutation
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return err
	}
	return nil
}

// ChangeEntityState attempts to set the desired entity state,
// but will not do so if the conditions are not met.
func (ms *{{ stringToLower $entity  }}Mutations) ChangeEntityState(m *entity.Mutation, state entity.EntityState) {
	e := ms.getEntity(m)
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return
	}
}

// getEntity returns the entity in the specified state.
func (ms *{{ stringToLower $entity  }}Mutations) getEntity(m *entity.Mutation) *{{ $entity }} {
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		return ms.Detacheds[key]
	case entity.Unchanged:
		return ms.Unchangeds[key]
	case entity.Deleted:
		return ms.Deleteds[key]
	case entity.Modified:
		return ms.Modifieds[key]
	case entity.Added:
		return ms.Addeds[key]
	}
	return nil
}

// Set sets the entity in the specified state.
func (ms *{{ stringToLower $entity  }}Mutations) set(e *{{ $entity }}, state entity.EntityState) {
	m := e.config.Mutation
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		delete(ms.Detacheds, key)
	case entity.Unchanged:
		delete(ms.Unchangeds, key)
	case entity.Deleted:
		delete(ms.Deleteds, key)
	case entity.Modified:
		delete(ms.Modifieds, key)
	case entity.Added:
		delete(ms.Addeds, key)
	}
	if state >= 0 {
		switch state {
		case entity.Detached:
			ms.Detacheds[key] = e
		case entity.Unchanged:
			ms.Unchangeds[key] = e
		case entity.Deleted:
			ms.Deleteds[key] = e
		case entity.Modified:
			ms.Modifieds[key] = e
		case entity.Added:
			ms.Addeds[key] = e
		}
	}
}
{{ end }}

{{ define "with_field"}}
{{ if not .Field.Locked }}
{{ if or ( not .Field.Required ) ( and .Field.Required  .Field.Default )  }}
// With{{ .Field.Name }} sets the "{{ stringToLower .Field.AttrName }}" field of the {{ .Entity }}.
func (s *{{ .BuilderName }}) With{{ .Field.Name }}({{ stringToLower  .Field.Name }} {{ .Field.ValueType }}) func(*{{ .EntityName }}) {
	return func(e *{{ .EntityName }}) {
		e.{{ .Field.Name }}.Set({{ stringToLower  .Field.Name }} )
	}
}
{{ end }}
{{ end }}
{{ end }}


{{ define "builder_rel_filed" }}

{{ end }}