{{ define "entity/delete" }}
{{ $entity := $.Entity.Name}}
{{ $entityAttr := $.Entity.AttrName }}
{{ $header := dict "Package" .Config.Package }}
{{ template "header" $header }}

{{ $importPkgs := dict "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package  "Entity" $.Entity  "Entity" $.Entity }}
{{ template "import/load" $importPkgs }}

// {{ $entity }}Delete is the delete action for the {{ $entity }}.
type {{ $entity }}Delete struct {
	config *internal.Dialect
	es         []*{{ $entity }}
	predicates []func(*entitysql.Predicate)
}

// New{{ $entity }}Delete creates a new {{ $entity }}Delete.
func New{{ $entity }}Delete(c *internal.Dialect, es ...*{{ $entity }}) *{{ $entity }}Delete {
	return &{{ $entity }}Delete{
		config: c,
		es: es,
	}
}

// Where adds a predicate to the delete action.
func (o *{{ $entity }}Delete) Where(predicates ...func(*entitysql.Predicate)) *{{ $entity }}Delete {
	o.predicates = append(o.predicates, predicates...)
	return o
}

func (o *{{ $entity }}Delete) delete(ctx context.Context,tx dialect.Tx) error {
	return o.sqlDelete(ctx,tx)
}

func (o *{{ $entity }}Delete) sqlDelete(ctx context.Context,tx dialect.Tx) error {
	var (
		spec, err = o.deleteSpec()
		affected  = int64(0)
	)
	if err != nil {
		return err
	}
	spec.Affected = &affected
	if err := entitysql.NewDelete(ctx, tx, spec); err != nil {
		return err
	}
	for _, e := range o.es {
		if err := e.setState(entity.Detached); err != nil {
			return err
		}
	}
	return nil
}

func (o *{{ $entity }}Delete) deleteSpec() (*entitysql.DeleteSpec, error) {
	spec := entitysql.NewDeleteSpec({{ $entityAttr }}.Entity)
	if ps := o.predicates; len(ps) > 0 {
		spec.Predicate = func(p *entitysql.Predicate) {
			for _, f := range ps {
				f(p)
			}
		}
	}
	{{- range $i, $f := $.Entity.Fields }}
		{{- if eq $f.Primary 1 }}
		pred{{ $f.Name }} := &{{ $entityAttr }}.Pred{{ $f.Name }}{}
		if o.predicates == nil {
			o.predicates = make([]func(*entitysql.Predicate), 0, len(o.es))
		}
		for i, e := range o.es {
			if e.{{ $f.Name }}.Get() != nil {
				if i >= 1 {
					o.predicates = append(o.predicates, entitysql.Or)
				}
				o.predicates = append(o.predicates, pred{{ $f.Name }}.EQ(*e.{{ $f.Name }}.Get()))
			}
		}
		{{- end }}
	{{- end }}
	if ps := o.predicates; len(ps) > 0 {
		spec.Predicate = func(p *entitysql.Predicate) {
			for _, f := range ps {
				f(p)
			}
		}
	}
	return spec, nil
}
{{ end }}