{{ define "entity/entity" }}
{{ $entity := $.Entity.Name}}
{{ $entityAttr := $.Entity.AttrName }}
{{ $header := createMap "Package" "entity" }}
{{ template "header" $header }}

{{ $importPkgs := createMap "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package  "Entity" $.Entity }}
{{ template "import/load" $importPkgs }}

{{ if ne $.Entity.Comment "" }}//{{ $.Entity.Comment }}{{ end }}
type {{ $entity }} struct {
	internal.Entity `json:"-"`
    config      *{{ stringToLower $entity}}Config 
    {{- range $i,$field := $.Entity.Fields }}
        {{ $field.Name }} *{{ snakeCaseToLowerCamelCase $entityAttr  }}{{ $field.Name }} {{ if ne $field.Tag "" }}`{{ $field.Tag }}`{{ end }} {{ if $field.Comment }} // {{ $field.Name }} {{ $field.Comment }} {{- end }}
    {{- end }}

	{{- range $relation :=  .Entity.Relations }}
	{{ $result := getEntityRel $relation $.Entity  }}
	{{ with $result }} 
	{{ stringToFirstCap $result.Name}} {{ $result.EntityType }} `json:"{{ stringToSnakeCase $result.Name }},omitempty"`
	{{ end }}
	{{- end }}
}

// {{ stringToLower $entity}}Config holds the configuration for the {{ $entity }}.
type {{ stringToLower $entity}}Config struct {
	internal.EntityConfig
	*internal.Dialect
	*entity.Mutation
	*{{ stringToLower $entity }}Mutations
	name string
}

func new{{ $entity }}Config(c *internal.Dialect) *{{ stringToLower $entity}}Config {
	return &{{ stringToLower $entity}}Config{
		Dialect:    c,
		{{ stringToLower $entity }}Mutations: new{{ $entity }}Mutations(),
		name: "{{ $entityAttr }}",
	}
}


// New creates a new {{ $entity }}, but does not add tracking.
func (c *{{ stringToLower $entity}}Config) New() internal.Entity {
	b := entity.NewMutation(entity.Detached)
	e := &{{ $entity }}{
		config: &{{ stringToLower $entity }}Config{
			Mutation:  b,
			Dialect:    c.Dialect,
			{{ stringToLower $entity }}Mutations: c.{{ stringToLower $entity }}Mutations,
		},
	}
	e.setState(entity.Detached)
	{{- range $i,$field := $.Entity.Fields }}
		e.{{ $field.Name }} = new{{ stringToFirstCap ( snakeCaseToLowerCamelCase $entityAttr ) }}{{ $field.Name }}(e.config)
	{{- end }}
	return e
}

func (c *{{ stringToLower $entity}}Config) Desc() internal.EntityConfigDesc {
	return internal.EntityConfigDesc{
		Name: c.name,
	}
}

// String implements the fmt.Stringer interface.
func (e *{{ $entity }}) String() string {
    return fmt.Sprintf("{ {{ joinFieldsString .Entity.Fields }}{{- range $relation :=  .Entity.Relations }}{{ $result := getEntityRel $relation $.Entity  }}{{ with $result }}, {{ stringToFirstCap $result.Name}}: %v{{ end }}{{- end }}}",
    {{- range $i,$field := $.Entity.Fields }}
        e.{{ $field.Name }},
    {{- end}}
	{{- range $relation :=  .Entity.Relations }}
	{{- $result := getEntityRel $relation $.Entity  }}
	{{- with $result }}
		e.{{ stringToFirstCap $result.Name }},
	{{- end }}
	{{- end }}
    )
}

// State returns the state of the {{ $entity }}.
func (e *{{ $entity }}) State() entity.EntityState {
	return e.config.State()
}

// remove removes the {{ $entity }} from the database.
func (e *{{ $entity }}) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new {{ $entity }} and adds tracking.
func (e *{{ $entity }}) create({{ joinRequiredFields .Entity.Fields false  }} options ...func(*{{ $entity }})) (*{{ $entity }}, error) {
	e.setState(entity.Added)
    {{- $requiredFields := getRequiredFields .Entity.Fields -}}
    {{- range $field := $requiredFields }}
        e.{{ $field.Name }}.Set({{ stringToSnakeCase $field.AttrName }})
    {{- end }}
	for _, option := range options {
		option(e)
	}
	return e, nil
}

// setUnchanged sets the state of the {{ $entity }} to unchanged.
func (e *{{ $entity }}) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

// setState sets the state of the {{ $entity }}.
func (e *{{ $entity }}) setState(state entity.EntityState) error {
	return e.config.{{ stringToLower $entity }}Mutations.SetEntityState(e, state)
}

// scan scans the database for the {{ $entity }}.
func (e *{{ $entity }}) scan(fields []entitysql.ScannerField) []any {
	if len(fields) == 0 {
		args := make([]any, len({{ $entityAttr }}.Columns))
		for i, c := range {{ $entityAttr }}.Columns {
			switch c.String() {
			{{- range $field := $.Entity.Fields }}
			case {{ $entityAttr }}.Field{{ $field.Name }}.Name.String():
				v := e.{{ $field.Name }}
				v.Set(*new({{ $field.ValueType }}))
				args[i] = v
			{{- end }}
			}
		}
		return args
	} else{
		args := make([]any, len(fields))
		for i := range fields {
			switch fields[i].String() {
			{{- range $field := $.Entity.Fields }}
			case {{ $entityAttr }}.Field{{ $field.Name }}.Name.String():
				v := e.{{ $field.Name }}
				v.Set(*new({{ $field.ValueType }}))
				args[i] = v
			{{- end }}
			}
		}
		return args
	}
}

func (e *{{ $entity }}) createRel(buidler *entitysql.ScannerBuilder, scanner *internal.QueryScanner) {
	switch scanner.Config.Desc().Name {
	{{- range $relation :=  .Entity.Relations }}
	{{- $result := getEntityRel $relation $.Entity  }}
	{{- with $result }}
	{{- $val := stringToLower $result.Rel.Name }}
	case "{{ $result.AttrName }}":
		{{ $val }} := scanner.Config.New().(*{{ $result.Rel.Name }})
		buidler.Append(scanner.TableNum - 1 , {{ $val }}.scan([]entitysql.ScannerField{})...)
		{{- if eq $result.Rel.Rel 1 }}
		e.{{ stringToFirstCap $result.Name}} = {{ $val }}
		{{- else if eq $result.Rel.Rel 2 }}
		e.{{ stringToFirstCap $result.Name}} = append(e.{{ stringToFirstCap $result.Name}}, {{ $val}})
		{{- end }}
		for _, c := range scanner.Children {
			{{ $val }}.createRel(buidler, c)
		}
	{{- end }}
	{{- end }}
	}
}

func merge{{ $entity }}(es []*{{ $entity }}, e *{{ $entity }}) []*{{ $entity }} {
	if e == nil{
		return es
	}
	if len(es) == 0 {
		es = append(es, e)
	}else{
		v := es[len(es) - 1]
		{{ $primaryKey := getPrimaryField .Entity.Fields }}
		if v.{{ $primaryKey.Name }}.Get() == e.{{ $primaryKey.Name }}.Get() {
		{{- range $relation :=  .Entity.Relations }}
		{{- $result := getEntityRel $relation $.Entity  }}
		{{- with $result }} 
		{{- if eq $result.Rel.Rel 1 }}
			{{ $result.AttrName }}s := merge{{ $result.Rel.Name }}([]{{ $result.EntityType }}{v.{{ stringToFirstCap $result.Name }}}, e.{{ stringToFirstCap $result.Name }})
			if len({{ $result.AttrName }}s) > 0 {
				v.{{ stringToFirstCap $result.Name }} = {{ $result.AttrName }}s[0]
			}
		{{- else if eq $result.Rel.Rel 2 }}
			for _, {{ $result.AttrName }} := range e.{{ stringToFirstCap $result.Name }} {
				{{ $result.AttrName }}s := merge{{ $result.Rel.Name }}(v.{{ stringToFirstCap $result.Name }}, {{ $result.AttrName }})
				if len({{ $result.AttrName }}s) > 0 {
					v.{{ stringToFirstCap $result.Name }} = {{ $result.AttrName }}s
				}
			}
		{{- end }}
		{{- end }}
		{{- end }}
		}else{
			es = append(es, e)
		}
	}
	return es
}

{{ end }}