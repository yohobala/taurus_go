{{ define "entity/entity" }}
{{ $entity := $.Entity.Name}}
{{ $entityAttr := $.Entity.AttrName }}
{{ $header := dict "Package" $entityAttr }}
{{ template "header" $header }}

{{ $importPkgs := dict "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package }}
{{ template "import/load" $importPkgs }}

type {{ $entity }} struct {
    config      *{{ $entity }}Config
    {{- range $i,$field := $.Entity.Fields }}
		{{ if $field.Comment }}
		// {{ $field.Name }} {{ $field.Comment }}
		{{- end }}
        {{ $field.Name }} *{{ $field.Name }}Type
    {{- end }}
}

type {{ $entity }}Config struct {
	*mutations
	*entity.Mutation
	*internal.Config
}


// New creates a new {{ $entity }}, but does not add tracking.
func New(c *internal.Config, ms *mutations) *{{ $entity }} {
	b := entity.NewMutation(entity.Detached)
	e := &{{ $entity }}{
		config: &{{ $entity }}Config{
			Mutation:  b,
			Config:    c,
			mutations: ms,
		},
	}
	e.setState(entity.Detached)
	{{- range $i,$field := $.Entity.Fields }}
		e.{{ $field.Name }} = new{{ $field.Name }}Type(e.config)
	{{- end }}
	return e
}



// String implements the fmt.Stringer interface.
func (e *{{ $entity }}) String() string {
    return fmt.Sprintf("{ {{ joinFieldsString .Entity.Fields }} }",
    {{- range $i,$field := $.Entity.Fields }}
        e.{{ $field.Name }},
    {{- end}}
    )
}

// State returns the state of the {{ $entity }}.
func (e *{{ $entity }}) State() entity.EntityState {
	return e.config.State()
}

func (e *{{ $entity }}) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new {{ $entity }} and adds tracking.
func (e *{{ $entity }}) create({{ joinRequiredFields .Entity.Fields false  }} options ...func(*{{ $entity }})) (*{{ $entity }}, error) {
	e.setState(entity.Added)
    {{- $requiredFields := getRequiredFields .Entity.Fields -}}
    {{- range $field := $requiredFields }}
        e.{{ $field.Name }}.Set({{ toSnakeCase $field.AttrName }})
    {{- end }}
	for _, option := range options {
		option(e)
	}
	return e, nil
}

func (e *{{ $entity }}) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

func (e *{{ $entity }}) setState(state entity.EntityState) error {
	return e.config.mutations.SetEntityState(e, state)
}

func scan(e *{{ $entity }}, fields []entitysql.FieldName, rows dialect.Rows) error {
	args := make([]interface{}, len(fields))
	for i := range fields {
		switch fields[i] {
		{{- range $field := $.Entity.Fields }}
        case Field{{ $field.Name }}.Name:
            args[i] = e.{{ $field.Name }}
        {{- end }}
		}
	}
	if err := rows.Scan(args...); err != nil {
		return err
	}
	return nil
}
{{ end }}