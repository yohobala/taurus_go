{{ define "rel/entity" }}
{{ $entity :=  toFirstLower .Entity.Name }}
{{ $entityAttr := .Entity.AttrName }}

{{ $header := dict "Package" "entity" }}
{{ template "header" $header }}

{{ $importPkgs := dict "ImportPkgs" $.Entity.ImportPkgs "Package" $.Config.Package  "Entity" $.Entity }}
{{ template "import/load" $importPkgs }}

type {{ $entity }}Relation struct {
	{{- range $rel := .Entity.Relations }}
	{{- $res := getEntityRelDirection $rel $.Entity }}
	{{ toFirstLower $res.Join.Name }}Rel
	{{ end -}}
	Config   internal.EntityConfig
	relation entitysql.RelationDesc
	children []rel
}

func new{{ toFirstCap $entity }}Relation(config internal.EntityConfig, desc entitysql.RelationDesc) * {{ $entity }}Relation {
	return & {{ $entity }}Relation{
		Config:   config,
		relation: desc,
		children: []rel{},
	}
}

func (r * {{ $entity }}Relation) Where(predicates ...entitysql.PredicateFunc) * {{ $entity }}Relation {
	r.relation.Predicates = append(r.relation.Predicates, predicates...)
	return r
}

func (r * {{ $entity }}Relation) Include(rels ...{{ $entity }}Rel) * {{ $entity }}Relation {
    // Create a slice of type Rel with the same length as r.children
    newRels := make([]rel, len(rels)) 
	for i, r := range rels {
        // Convert each {{ $entity }}Rel to Rel and store it in the new slice
        newRels[i] = rel(r) 
	}
	r.children = append(r.children, newRels...)
	return r
}

func (r  *{{ $entity }}Relation) Desc() (entitysql.RelationDesc, []rel, internal.EntityConfig) {
	return r.relation, r.children, r.Config
}

func (r *{{ $entity }}Relation) reset() {
	for _, child := range r.children {
		child.reset()
	}
	r.relation.Reset()
	r.children = []rel{}
}

{{ end }}